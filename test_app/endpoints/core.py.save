from urllib.request import urlopen
from bs4 import BeautifulSoup
from llama_index import Document
from llama_index import GPTSimpleVectorIndex
from llama_index import LangchainEmbedding
from langchain.embeddings import HuggingFaceEmbeddings
from llama_index import PromptHelper
from lang_chain_wrapper import ChatGPTLLMPredictor
from pymongo import MongoClient
import google.generativeai as genai
import json
import random 

genai.configure(api_key="AIzaSyDdjBBBmOSGVVZLkqt4a52LjbeHUINvhC0")

generation_config = {
  "temperature": 0.9,
  "top_p": 1,
  "top_k": 1,
  "max_output_tokens": 2048,
}

safety_settings = [
  {
    "category": "HARM_CATEGORY_HARASSMENT",
    "threshold": "BLOCK_MEDIUM_AND_ABOVE"
  },
  {
    "category": "HARM_CATEGORY_HATE_SPEECH",
    "threshold": "BLOCK_MEDIUM_AND_ABOVE"
  },
  {
    "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
    "threshold": "BLOCK_MEDIUM_AND_ABOVE"
  },
  {
    "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
    "threshold": "BLOCK_MEDIUM_AND_ABOVE"
  },
]

model = genai.GenerativeModel(model_name="gemini-1.0-pro",                              generation_config=generation_config,
                              safety_settings=safety_settings)


# Connect to MongoDB
client = MongoClient("mongodb+srv://sanyam12sks:jP4J5DQXdcSKPwGd@cluster0.8g19w8t.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0")
db = client['knolly']  # Replace 'your_database' with your actual database name
collection = db['doubts']
import json


def analyse_with_top(body):
    number = body.get("number")
    db_col = db['quests']

    pipeline = [
        {
            "$group": {
                "_id": "$student_id",
                "correct_answers": {
                    "$sum": {
                        "$cond": [
                            {"$eq": ["$allocated_marks", "$total_marks"]},
                            1,
                            0
                        ]
                    }
                }
            }
        },
        {
            "$sort": {
                "correct_answers": -1
            }
        },
        {
            "$limit": number
        },
        {
            "$project": {
                "_id": 0,
                "student_id": "$_id"
            }
        }
    ]

    result = list(db_col.aggregate(pipeline))
    top_students = [doc["student_id"] for doc in result]
    collection = db["users"]
    student_list = []
    for student_id in top_students:
        student = collection.find_one({'_id': student_id})
        student_list.append(student['name'].split()[0])
    return {"status": 1, "student_rank_with_order": student_list}
   
def coaching_with_llm(body):
    try:
        dict = coaching_with_llm_2(body)
    except:
        dict = coaching_with_llm_2(body)
    return dict

def coaching_with_llm_2(body):
    student_question = body.get("question")
    answer = body.get("answer")
    marks = body.get("marks")
    final_answer = body.get("final_answer")

    query_1 = f"Solve this question: {student_question}. Store the response in a dict where you have {{'solution_steps_with_answer':'', 'final_answer':''}}"
    index = index_builder_coaching("gpt-3.5-turbo")
    solution_response = index.query(query_1, mode="embedding")
    gpt_response_1 = solution_response.response
    json_string = gpt_response_1.replace("'", "\"")
    json_data = json.loads(json_string)
    model_solution = json_data["solution_steps_with_answer"]
    model_final = json_data["final_answer"]

    final_query = f"Here is a Question: {student_question} \n Here is the Correct Solution: {model_solution} \n  Maximum marks is {marks}  \n Student have given this solution :{answer} \n Check if the student solution is correct and then respond like  {{'marks_awarded_to_student': , 'feedback':''}}. Do not use any apostrophe in feedback"
    
    try:
        response = index.query(final_query, mode="embedding")
        gpt_response = response.response
        print(gpt_response)
        json_string = gpt_response.replace("'", "\"")
        json_data = json.loads(json_string)
    except:
        try:
            response = index.query(final_query, mode="embedding")
            gpt_response = response.response
            print(gpt_response)
            #json_string =  json_string.replace("student's", "student")
            json_string = gpt_response.replace("'", "\"")
            json_data = json.loads(json_string)
        except:
            response = index.query(final_query, mode="embedding")
            gpt_response = response.response
            print(gpt_response)
            json_string =  gpt_response.replace("student's", "student")
            json_string = gpt_response.replace("'", "\"")
            json_data = json.loads(json_string)

    print(gpt_response)
    print(model_solution)
    print(model_final)
    #json_string =  json_string.replace("student's", "student")
    #json_data =  eval(json_string)
   
    marks_awarded_to_student = json_data['marks_awarded_to_student']

    try:
        if int(model_final) == int(final_answer):
            json_data["marks_awarded_to_student"] = marks
    except:
        print("test not same")

    if str(model_final) == str(final_answer) or marks_awarded_to_student == marks :
        json_data["marks_awarded_to_student"] = marks

    elif json_data["marks_awarded_to_student"] != marks:
        comparison_query = f"First answer: {final_answer} and second answer: {model_final}. Compare and check whether the two answers match. If they do, then return {{'total_marks': {marks}}}. Otherwise, return total_marks as  {marks_awarded_to_student}. Remember only return {'total_marks'}"
        print(comparison_query)
        index = index_builder_question_compare("gpt-3.5-turbo", final_answer, model_final)
        response = index.query(comparison_query, mode="embedding")
        question_response = response.response
        print(question_response)
        json_string = question_response.replace("'", "\"")
        data = json.loads(json_string)
        print(data)
        print(json_string)
        json_data["marks_awarded_to_student"] = data["total_marks"]
    
    # Add index and query the data 
    print({"status": 1, "response":json_data,"question":student_question, "student_answer":answer, "model_solution": model_solution, "final_model_answer": model_final})
    return {"status": 1, "response":json_data,"question":student_question, "student_answer":answer}

def store_interaction(question, response):
    interaction = {"question": question, "response": response}
    collection.insert_one(interaction)

def convert_timestamp(doc):
    doc["timestamp"] = Int64(doc["timestamp"]["$date"]["$numberLong"])
    return doc

def query_builder_chat(index, question, id, name, response_type):
    print(response_type)
    if response_type == "follow_up":
        limit = 1

        pipeline = [
           {"$match": {"student_id": id}},
           {"$sort": {"timestamp": -1}},
           {"$limit": limit}
            ]
    #past_interactions = collection.find("student_id", id).sort([("_id", -1)]).limit(3)
        past_interactions = list(collection.aggregate(pipeline))
    #past_interactions = [convert_timestamp(doc) for doc in past_interaction]
        guide = "Example scenario: Student: Hi Knolly, can you help me learn about solving quadratic equations? Knolly: Absolutely! Quadratic equations are a fundamental concept in algebra used to model various real-world scenarios. But before we dive into solving them, let's first explore why they're important…. Knolly: Can you think of any situations where you might encounter a problem best represented by a quadratic equation? (Wait for student response) Example 1: For instance, quadratic equations are used to model the trajectory of a projectile thrown into the air. Imagine throwing a ball - the height it reaches depends on the force you throw it with and gravity acting on it. Example 2: They're also useful in optimizing shapes and areas. Architects use them to design the perfect arch for a bridge! Student: Wow, I Never thought about that! Knolly: Great! Now that we understand the importance of quadratic equations, let's tackle solving them. There are a few different methods we can use. Today, let's focus on the quadratic formula. Knolly: Here's a worked example: Let's say we have the equation x² + 6x + 5 = 0. The quadratic formula helps us find the solutions (roots) of this equation. Can you tell me what the formula looks like? (Wait for student response) [If student struggles, Knolly can provide a hint: The formula involves the coefficients of the equation and incorporates square root.] Student: Oh yeah, I remember it now. a = coefficient of x², b = coefficient of x, and c = constant term. So in this case, it would be x = (-b ± √(b² - 4ac)) / 2a. Knolly: Perfect! Now, let's plug the values from our example (a = 1, b = 6, c = 5) into the formula and solve for x. Would you like to try solving it yourself, or would you like me to walk you through it step-by-step? Student: I think I can do it myself! Knolly: (After student solves for x) Great job! You got the correct answers, which are x = -1 and x = -5. Knolly: Just to solidify your understanding, can you explain in your own words the steps you took to solve for x using the formula? (Are you ready to try a harder question….) Rather than worded explanation we ask them increasing harder questions and ask the student to type their answer and how they worded it Right at the end…(im satisfied with your knowledge on quadratics…do you want to move onto Choosing the most likely next topic that should be l Student: (Student explains their thought process) Knolly: Excellent explanation! Now, to test your skills, can you try solving another quadratic equation on your own? (If students explanation is incorrect…then knolly can correct the students explanation) Student: Sure! **[Knolly provides a new practice question tailored to the student's level] After the student attempts the question: Knolly: Great effort! Let's compare your answer with the solution. (Knolly reviews the answer and provides feedback)"
        context = ""
        for interaction in past_interactions:
            context += interaction["question"] + "\n" + interaction["answer"] + "\n"
    else:
        context = ""
    final_query = f"You are a maths teacher who is helping out {name} in his maths journey. Here is the sentence said by {name}: {question}. Here is the past conversation Context:\n{context}. Your name is Knolly. Answer {name}'s query also give him an insight about his question which can be an application of his maths query. Greet only sometimes."  
    response = index.query(final_query, mode="embedding")
    answer = response.response
    answer = answer.replace("**", "")
    print(answer)
    #store_interaction(question, answer)

    return answer

def analyse_with_llm(body):
    student_question = body.get("question")
    past_question = body.get("past_question")
    index = index_builder("gpt-3.5-turbo")
    try:
        response = query_builder(index, student_question, past_question)
    except:
        try:
            response = query_builder(index, student_question, past_question)
        except:
            response = query_builder(index, student_question, past_question)
    return {"status": 1, "response":response}

def analyse_with_llm_chat(body):
    student_question = body.get("question")
    student_id = body.get("student_id")
    student_name = body.get("student_name")
    response_type = body.get("response_type")
    index = index_builder_chat("gpt-3.5-turbo")
    response = query_builder_chat(index, student_question, student_id, student_name, response_type)

    return {"status": 1, "response":response}

def health():
    return "OK"



def doc_builder_coaching():
    
    #doc = f" The scraped data for the URL {url} are" + url_data
    instructions = ("Task is to rate student based on their answers. You will get a question, total marks and students solution.\n"
               "Instructions:\n"
               "• Only check the final answer given by the student.\n"
               "• Give a feedback to the student \n"
               "• Allot marks to the student. \n"
               "• The response should be in json format with {'marks_awarded_to_student': '', 'feedback': }.\n")


    doc = f"Here are some sample reference  {instructions}"
    doc = Document(doc)

    return doc


def doc_builder_question_compare(answer_1, answer_2):
    
    instructions = ("You are a maths intructor who is good at evaluating final answers. You would be given two answer and you have to tell if both of them are same or not with numbers. Your response should be {'total_marks': ''} ")
    doc = f"Here are some sample reference  {instructions}"
    doc = Document(doc)

    return doc

def index_builder_question_compare(model, answer_1, answer_2):
    docs = []
    model = "gpt-3.5-turbo"
    role = "maths teacher"
    docs.append(doc_builder_question_compare(answer_1, answer_2))
    content = "You are a helpful " + role + "assistant"
    llm_predictor = ChatGPTLLMPredictor([{"role": "system", "content": content}], model)
    model_name = "sentence-transformers/stsb-mpnet-base-v2"
    hf_embedd = HuggingFaceEmbeddings(model_name=model_name)
    embed_model = LangchainEmbedding(hf_embedd)
    max_input_size = 8000
    num_output = 512
    max_chunk_overlap = 200
    prompt_helper = PromptHelper(max_input_size, num_output, max_chunk_overlap)
    index = GPTSimpleVectorIndex(docs, embed_model=embed_model, llm_predictor=llm_predictor,
                                    prompt_helper=prompt_helper)
    return index

def doc_builder():
    
    #doc = f" The scraped data for the URL {url} are" + url_data
    instructions = ("Task is to generate similar questions and assign marks to each question as per the difficulty.\n"
               "Instructions:\n"
               "• You need to change in the numbers with the question\n"
               "• Try to rephrase the questions\n"
               "• Make it a new question\n"
               "• The response should be in json format with {'question': '', 'marks': }.")

    similar_question = ("Here are some sample questions\n"
                    "1. Here is a list of numbers 2 4 4 7 8\n Work out the range of these numbers. Marks= 1\n"
                    "2. Work out 120 – 89 Marks= 1\n"
                    "3. Simplify 3×a×4 Marks= 1\n"
                    "4. There are 3 litres of oil in a can. Jermaine uses 700 millilitres of the oil. Work out the amount of oil left in the can. Give your answer in millilitres. Marks= 3 \n"
                    "5. Ebony makes some bracelets to sell. The materials to make all the bracelets cost £190, correct to the nearest £5Ebony sells all the bracelets for a total of £875, correct to the nearest £5The total time taken to make and sell all these bracelets was 72 hours, correct to thenearest hour.Ebony uses this method to calculate her hourly rate of payHourly rate of paytotal selling price total cost of materials total time taken The minimum hourly rate of pay for someone of Ebony’s age is £8.20 By considering bounds, determine if Ebony’s hourly rate of pay was definitely morethan £8.20 You must show all your working. Marks = 4 \n"
                    "6. Expand and simplify 5( p + 3) – 2(1 – 2p) Marks 2 \n"
                    "7. Lamp A flashes every 20 seconds.Lamp B flashes every 45 seconds.Lamp C flashes every 120 seconds. The three lamps start flashing at the same time. How many times in one hour will the three lamps flash at the same time? Marks 3 \n")

    doc = f"Here are some sample questions for your reference. {similar_question}"
    doc = Document(doc)

    return doc

def doc_builder_chat():
    

    instructions = """
    Task is to be a maths buddy who is helping students practising for GCSE exam. Here are some contextual data. Some revision tips for GCSE are:
    Tip 1: The best way to revise GCSE Maths is to DO lots of Maths.
    Tip 2: Revise lots of different topics in rotation.
    Tip 3: Try some exam questions, fill in the gaps, then go back and try again.
    Tip 4: Understand the mark scheme
    Tip 5: Gradually reduce reliance on notes and formula sheets.
    Tip 6: Explain what you're doing.
    Tip 7: Don't throw away easy marks.
    Tip 8: Build up to exam conditions.    
    Tip 9: Keep an eye on the clock.
    Tip 10: You don't have to do the questions in order.
    Tip 11: Look beyond your exam board.
    Tip 12: Don't overdo it!
    Here methods how to prepare about GCSE but inefficient techniques such as rereading, highlighting, and summarizing, based on research findings. Instead, it recommends active recall and spaced repetition as more effective strategies. The piece delves into various study methods like closed-book exercises, Anki flashcards, and the Feynman Technique. It also offers tips for effective note-taking, including the Cornell Method and mind maps.
    GCSE maths syllabus:
    The GCSE maths test comprises six subject areas: Number, Algebra, Ratio, Proportion and Rates of Change, Geometry and Measures, Probability, and Statistics. It offers two tiers: Foundation (grades 1–5) and Higher (grades 4–9). Each tier requires three question papers to be taken in the same series.
    The topics covered in the syllabus include:
    Number: Covers operations with integers, decimals, fractions, prime numbers, powers, standard form, etc.
    Algebra: Focuses on algebraic notation, manipulation, graphs, solving equations and inequalities, sequences, etc.
    Ratio, Proportion and Rates of Change: Addresses the manipulation of ratios, proportions, percentages, and solving problems involving direct and inverse proportion.
    Geometry and Measures: Includes properties of geometric figures, mensuration, vectors, etc.
    Probability: Covers concepts of probability, frequency analysis, theoretical probability, and constructing possibility spaces.
    Statistics: Focuses on interpreting and constructing various types of data representations, applying statistics to describe populations, and analyzing scatter graphs.
    """

    doc = f" {instructions}"
    doc = Document(doc)

    return doc

def index_builder_coaching(model):

    docs = []
    model = "gpt-3.5-turbo"
    role = "maths teacher"
    docs.append(doc_builder_coaching())
    content = "You are a helpful " + role + "assistant"
    llm_predictor = ChatGPTLLMPredictor([{"role": "system", "content": content}], model)
    model_name = "sentence-transformers/stsb-mpnet-base-v2"
    hf_embedd = HuggingFaceEmbeddings(model_name=model_name)

    # load in HF embedding model from langchain
    embed_model = LangchainEmbedding(hf_embedd)
    max_input_size = 8000
    # set number of output tokens
    num_output = 512
    # set maximum chunk overlap
    max_chunk_overlap = 200

    prompt_helper = PromptHelper(max_input_size, num_output, max_chunk_overlap)

    index = GPTSimpleVectorIndex(docs, embed_model=embed_model, llm_predictor=llm_predictor,
                                    prompt_helper=prompt_helper)

    return index


def index_builder(model):

    docs = []
    model = "gpt-3.5-turbo"
    role = "maths teacher"
    docs.append(doc_builder())
    content = "You are a helpful " + role + "assistant"
    llm_predictor = ChatGPTLLMPredictor([{"role": "system", "content": content}], model)
    model_name = "sentence-transformers/stsb-mpnet-base-v2"
    hf_embedd = HuggingFaceEmbeddings(model_name=model_name)

    # load in HF embedding model from langchain
    embed_model = LangchainEmbedding(hf_embedd)
    max_input_size = 8000
    # set number of output tokens
    num_output = 512
    # set maximum chunk overlap
    max_chunk_overlap = 200

    prompt_helper = PromptHelper(max_input_size, num_output, max_chunk_overlap)

    index = GPTSimpleVectorIndex(docs, embed_model=embed_model, llm_predictor=llm_predictor,
                                    prompt_helper=prompt_helper)

    return index

def index_builder_chat(model):

    docs = []
    model = "gpt-3.5-turbo"
    role = "maths teacher"
    docs.append(doc_builder_chat())
    content = "You are a helpful " + role + "assistant"
    llm_predictor = ChatGPTLLMPredictor([{"role": "system", "content": content}], model)
    model_name = "sentence-transformers/stsb-mpnet-base-v2"
    hf_embedd = HuggingFaceEmbeddings(model_name=model_name)

    # load in HF embedding model from langchain
    embed_model = LangchainEmbedding(hf_embedd)
    max_input_size = 8000
    # set number of output tokens
    num_output = 512
    # set maximum chunk overlap
    max_chunk_overlap = 200

    prompt_helper = PromptHelper(max_input_size, num_output, max_chunk_overlap)

    index = GPTSimpleVectorIndex(docs, embed_model=embed_model, llm_predictor=llm_predictor,
                                    prompt_helper=prompt_helper)

    return index

def select_random_topic(subject):

    exam_topics = {
        "Algebra problem": {
            "Algebraic Manipulation": [
                "Changing the subject advanced",
                "Collecting like terms",
                "Completing the square",
                "Dividing terms",
                "Expanding brackets",
                "Expanding two brackets",
                "Expanding three brackets",
                "Expressions – forming",
                "Indices",
                "Multiplying terms",
                "Notation",
                "Substitution"
            ],
            "Algebraic Fractions": [
                "Addition",
                "Division",
                "Multiplication",
                "Simplifying"
            ],
            "Equation of a Circle": [
                "Center-radius form equation",
                "Finding radius of the circle"
            ],
            "Simple maths": [
                "Simple Factorization",
                "Rearranging equations",
                "Linear inequalities",
                "Quadratic inequalities",
                "quadratic inequality by factorising",
            ],
            "Sequences": [
                "Arithmetic sequences",
                "Geometric sequences",
                "Special sequences",
                "Quadratic sequences",
                "Fibonacci Sequence",

            ],
            "Functions": ["Composite functions", "Inverse functions", ]

        },
        "Statistics problem": {
            "Averages": [
                "Mean",
                "Median",
                "Mode",
                "Range",
                "Quartiles"
            ],
            "Frequency Tables": [
                "Mean",
                "Median",
                "Mode",
                "Range"
            ],
            "Estimation": [
                "Mean",
                "Median"
            ],
        },
        "Number Theory problem": {
            "Multiplication": [
                "Grid method",
                "Column method",
                "End number",
                "By 10, 100 etc",
                "Powers of 10",
                "Decimals",
                "Times tables"
            ],
            "Negatives": [
                "Addition/subtraction",
                "Multiplication",
                "Division",
                "Ordering",
                "Real-life applications"
            ],
            "Basic Operations": [
                "Best buys",
                "BODMAS (order of operations)"
            ],
            "Factors and Multiples": [
                "Common multiples/LCM",
                "Common factors/HCF",
                "Multiples",
                "Ordering numbers"
            ],
            "Number Properties": [
                "Cube numbers",
                "Cubing a number",
                "Cube root",
                "Currency",
                "Estimation",
                "Place value",
                "Odd and even numbers",
                "Prime numbers",
                "Square numbers",
                "Squaring a number",
                "Square root",
                "Triangular numbers",
                "Rational/irrational numbers"
            ],
            "Product of Primes": [
                "Product of primes",
                "LCM/HCF"
            ],
        },
        "Probability problem": {
            "Basic Probability": [
                "Basic probability",
                "Sample space",
                "Relative frequency"
            ],
            "Rules of Probability": [
                "OR rule",
                "Conditional probability",
                "Independent events",
                "Not happening",
                "Union",
                "Intersection",
                "Complement",
                "Dependent Events",
                "Mutually exclusive events",
                "Exhaustive events",
            ],
            "Probability Techniques": [
                "Tree diagrams",
                "Listing outcomes"
            ]
        },
        "Differentiation problem": {
            "Basic Differentiation": [
                "Finding derivatives of basic functions",
                "Using the power rule for differentiation",
                "Using the constant multiple rule for differentiation"
            ],
            "Differentiation of Composite Functions": [
                "Applying the chain rule",
                "Finding derivatives of composite functions"
            ],
            "Implicit Differentiation": [
                "Applying implicit differentiation to find derivatives"
            ],
            "Differentiation of Exponential and Logarithmic Functions": [
                "Finding derivatives of exponential functions",
                "Finding derivatives of logarithmic functions",
                "Using the rules of differentiation for exponentials and logarithms"
            ],
            "Differentiation of Trigonometric Functions": [
                "Finding derivatives of trigonometric functions",
                "Applying the chain rule to trigonometric functions"
            ],
            "Applications of Differentiation": [
                "Finding equations of tangents and normals",
                "Finding maximum and minimum points",
                "Solving optimization problems"
            ],
            "Related Rates": [
                "Understanding related rates problems",
                "Applying differentiation to solve related rates problems"
            ]
        },
        "Integration problem": {
            "Basic Integration": [
                "Finding indefinite integrals of basic functions",
                "Using the power rule for integration",
                "Using the constant multiple rule for integration"
            ],
            "Integration by Substitution": [
                "Identifying appropriate substitutions",
                "Applying the substitution method to solve integrals"
            ],
            "Integration by Parts": [
                "Understanding when to use integration by parts",
                "Applying the integration by parts formula",
                "Repeated integration by parts"
            ],
            "Integration of Trigonometric Functions": [
                "Integrating trigonometric functions",
                "Using trigonometric identities to simplify integrals"
            ],
            "Integration of Exponential and Logarithmic Functions": [
                "Integrating exponential functions",
                "Integrating logarithmic functions",
                "Using properties of logarithms to simplify integrals"
            ],
            "Applications of Integration": [
                "Finding areas under curves",
                "Finding the area between curves",
                "Finding the average value of a function over an interval"
            ],
            "Definite Integrals": [
                "Understanding the difference between definite and indefinite integrals",
                "Evaluating definite integrals using the fundamental theorem of calculus",
                "Interpreting definite integrals as areas"
            ]
        },
        "Linear Algebra problem": {
        "Matrix Operations": [
            "Addition",
            "Subtraction",
            "Scalar multiplication",
            "Matrix multiplication",
            "Determinants"
        ],
        "Systems of Linear Equations": [
            "Solving systems of linear equations",
            "Gaussian elimination",
            "Matrix methods"
        ],
        "Vector Operations": [
            "Addition",
            "Subtraction",
            "Scalar multiplication",
            "Vector magnitude",
            "Dot product",
            "Cross product"
        ]
    },
    "Geometry problem": {
        "Angle Properties": [
            "Angle sum of polygons",
            "Interior and exterior angles of polygons",
            "Properties of parallel lines",
            "Properties of perpendicular lines"
        ],
        "Coordinate Geometry": [
            "Distance formula",
            "Midpoint formula",
            "Equation of a line",
            "Gradient of a line"
        ],
        "Geometric Transformations": [
            "Translation",
            "Reflection",
            "Rotation",
            "Enlargement"
        ],
        "Pythagoras' Theorem": [
            "Using Pythagoras' theorem to find missing lengths",
            "Finding the length of the hypotenuse",
            "Finding the length of a shorter side"
        ]
    },
    "Trigonometry problem": {
        "Trigonometric Functions": [
            "Sine function",
            "Cosine function",
            "Tangent function",
            "Cosecant function",
            "Secant function",
            "Cotangent function"
        ],
        "Solving Trigonometric Equations": [
            "Using trigonometric identities",
            "Using inverse trigonometric functions",
            "Solving equations involving multiple trigonometric functions"
        ],
        "Applications of Trigonometry": [
            "Finding distances and heights",
            "Modeling periodic phenomena",
            "Analyzing alternating currents",
            "Navigational problems"
        ]
        }
    }
    if subject in exam_topics:
        topic = random.choice(list(exam_topics[subject].keys()))
        subtopic = random.choice(exam_topics[subject][topic])
        return topic, subtopic
    else:
        return None, None


def query_builder(index, question, past_question):

    subject = question
    try:
        topic, subtopic = select_random_topic(subject)
        final_query = f"You are a maths teacher. You have to recommend questions based on the topic asked by the student.\n" \
              f"Here is the topic and subtopic asked by the student: {topic} {subtopic}  Assign marks to it as well. Try to generate a new topic of the user question. Past Question was {past_question}\n" \
              "Answer the question in this format with {{'question': '', 'marks': ''}} Do not use any apostrophe in the question" 
        response = index.query(final_query, mode="embedding")
        answer = response.response
        original_string = answer
        start_index = original_string.find('{')
        end_index = original_string.find('}')
        answer = original_string[start_index:end_index+1]
        json_string = answer.replace("'", "\"")
        print(json_string)
        data = json.loads(json_string)
    
    except:
        topic, subtopic = select_random_topic(subject)
        final_query = f"You are a maths teacher. You have to recommend questions based on the topic asked by the student.\n" \
              f"Here is the topic and subtopic asked by the student: {topic} {subtopic}  Assign marks to it as well. Try to generate a new topic of the user question. Past Question was {past_question}\n" \
              "Answer the question in this format with {{'question': '', 'marks': ''}} Do not use any apostrophe in the question" 
        response = index.query(final_query, mode="embedding")
        answer = response.response
        original_string = answer
        start_index = original_string.find('{')
        end_index = original_string.find('}')
        answer = original_string[start_index:end_index+1]
        json_string = answer.replace("'", "\"")
        print(json_string)
        data = json.loads(json_string)
    
    return data

def query_builder_old(index, question, past_question):

    print(question, past_question)
    subject = question
    topic, subtopic = select_random_topic(subject)
    final_query = f"You are a maths teacher. You have to recommend questions based on the topic asked by the student.\n" \
              f"Here is the topic and subtopic asked by the student: {topic} {subtopic}  Assign marks to it as well. Try to generate a new topic of the user question. Past Question was {past_question}\n" \
              "Answer the question in this format with {{'question': '', 'marks': ''}} Do not use any apostrophe in the question" 
    print(final_query)
    response = index.query(final_query, mode="embedding")
    #print(final_query)
    #print(past_question)
    answer = response.response
    original_string = answer
    start_index = original_string.find('{')
    end_index = original_string.find('}')
    answer = original_string[start_index:end_index+1]
    # print(answer)
    try:
        json_string = answer.replace("'", "\"")
        data = json.loads(json_string)
    except:
        response = index.query(final_query, mode="embedding")
        answer = response.response
        json_string = answer.replace("'", "\"")
        data = json.loads(json_string)
    print(data, past_question)
    return data


def doc_builder_multi():
    
    instructions = ("Task is to generate a question as per student's topic and generate solution in step format.\n"
               "Instructions:\n"
               "• Check the steps followed by the student\n"
               "• Give a feedback to the student \n"
               "• Allot marks to the student. \n"
               "• The response should be in json format with {'question': '', 'steps': [{'order':1, 'solution_step': ''}, {'order':2, 'solution_step': ''}] }.\n")


    doc = f"Here are some sample reference  {instructions}"
    doc = Document(doc)

    return doc

def index_builder_multi(model):

    docs = []
    model = "gpt-3.5-turbo"
    role = "maths teacher"
    docs.append(doc_builder_multi())
    content = "You are a helpful " + role + "assistant"
    llm_predictor = ChatGPTLLMPredictor([{"role": "system", "content": content}], model)
    model_name = "sentence-transformers/stsb-mpnet-base-v2"
    hf_embedd = HuggingFaceEmbeddings(model_name=model_name)

    # load in HF embedding model from langchain
    embed_model = LangchainEmbedding(hf_embedd)
    max_input_size = 8000
    # set number of output tokens
    num_output = 512
    # set maximum chunk overlap
    max_chunk_overlap = 200

    prompt_helper = PromptHelper(max_input_size, num_output, max_chunk_overlap)

    index = GPTSimpleVectorIndex(docs, embed_model=embed_model, llm_predictor=llm_predictor,
                                    prompt_helper=prompt_helper)

    return index


def query_builder_multi(index, topic, past_question):

    subject = topic+ " problem"
    topic, subtopic = select_random_topic(subject)
    print(subject)
    print(topic, subtopic)
    final_query = f"You are a maths teacher. You have to recommend questions along with the answer based on the topic asked by the student. Here is the past question {past_question}. Make sure you generate new question\n" \
              f"Here is the  topic and subtopic by the student: {topic} {subtopic} . Generate the question, and steps of answer. You can have multiple steps, final answer should be in one step only.  Assign marks to the question as well. The steps should be simple to order such that formula step is before substitution step.\n" \
              "Answer the question in JSON format with [{'question': '', 'marks': '', 'steps':[{'order': 1, 'solution_step':''}, {'order':2, 'solution_step'}, {}, {}]}]. Value of marks is number of steps.  Do not use any apostrophe in the question. No need to add slashes or line changes" #. If the question asked by student is not a maths problem then retur>
    print(final_query)
    try:
        response = index.query(final_query, mode="embedding")
        answer = response.response
        json_string = answer.replace("'", "\"")
        json_data = json.loads(json_string)
        print(json_data)
    except:
        response = index.query(final_query, mode="embedding")
        answer = response.response
        json_string = answer.replace("'", "\"")
        json_data = json.loads(json_string)
        print(json_data)
    return json_data

def analyse_with_multi(body):
    student_question = body.get("question")
    index = index_builder_multi("gpt-3.5-turbo")
    past_question = body.get("past_question")
    print(past_question)
    try:
        json_data = query_builder_multi(index, student_question,past_question)
    except:
        json_data = query_builder_multi(index, student_question,past_question)
    #json_string = response.replace("'", "\"")
    #json_data = json.loads(json_string)
    return {"status": 1, "response":json_data}
